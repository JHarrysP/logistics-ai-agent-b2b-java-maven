# ============= NGINX CONFIGURATION =============
# File: docker/nginx/nginx.conf
events {
    worker_connections 1024;
}

http {
    upstream logistics_backend {
        server logistics-app:8080;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    
    server {
        listen 80;
        server_name localhost;

        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        
        # API proxy
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://logistics_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
        
        # Health check endpoint (no rate limiting)
        location /actuator/health {
            proxy_pass http://logistics_backend;
            proxy_set_header Host $host;
        }
        
        # Static content
        location / {
            proxy_pass http://logistics_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}

# ============= KUBERNETES DEPLOYMENT (OPTIONAL) =============
# File: k8s/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logistics-ai-agent
  labels:
    app: logistics-ai-agent
spec:
  replicas: 3
  selector:
    matchLabels:
      app: logistics-ai-agent
  template:
    metadata:
      labels:
        app: logistics-ai-agent
    spec:
      containers:
      - name: logistics-ai-agent
        image: logistics-ai-agent:latest
        ports:
        - containerPort: 8080
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "k8s"
        - name: DB_HOST
          value: "postgres-service"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
